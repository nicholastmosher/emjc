(MAIN-CLASS-DECL (ID ArrayFold)
	(MAIN-FUN-CALL (STRING-ARRAY (ID a))
		(PRINTLN (ARRAY-LOOKUP (ID a)(INTLIT 0)))
(SIDEF (DOT (NEW-INSTANCE (ID Start)) (FUN-CALL (ID start))))

	)
)
(CLASS-DECL (ID Start)
	(MTD-DECL INT (ID start) (TY-ID-LIST )
	(BLOCK
		(VAR-DECL (ID Arrays) (ID af))
		(VAR-DECL INT-ARRAY (ID arr))
		(VAR-DECL (ID Lt) (ID lt))
		(VAR-DECL INT-ARRAY (ID filArr))
		(VAR-DECL (ID Add) (ID addOp))
		(VAR-DECL INT (ID sum))
		(VAR-DECL (ID Mult) (ID multOp))
		(VAR-DECL INT (ID prod))
		(EQSIGN (ID arr) (NEW-INT-ARRAY (INTLIT 6)))
		(EQSIGN (ID af) (NEW-INSTANCE (ID Arrays)))
		(EQSIGN (ARRAY-ASSIGN (ID arr)(INTLIT 0)) (INTLIT 54))
		(EQSIGN (ARRAY-ASSIGN (ID arr)(INTLIT 1)) (INTLIT 73))
		(EQSIGN (ARRAY-ASSIGN (ID arr)(INTLIT 2)) (INTLIT 7))
		(EQSIGN (ARRAY-ASSIGN (ID arr)(INTLIT 3)) (INTLIT 42))
		(EQSIGN (ARRAY-ASSIGN (ID arr)(INTLIT 4)) (INTLIT 33))
		(EQSIGN (ARRAY-ASSIGN (ID arr)(INTLIT 5)) (INTLIT 7))
		(PRINTLN (PLUS (STRINGLIT array: ) (DOT (ID af) (FUN-CALL (ID toString)(ID arr)))))
		(EQSIGN (ID lt) (NEW-INSTANCE (ID Lt)))
(SIDEF (DOT (ID lt) (FUN-CALL (ID setB)(INTLIT 41))))
		(EQSIGN (ID filArr) (DOT (ID af) (FUN-CALL (ID filter)(ID arr)(ID lt))))
		(PRINTLN (PLUS (STRINGLIT filtered array: ) (DOT (ID af) (FUN-CALL (ID toString)(ID filArr)))))
		(EQSIGN (ID addOp) (NEW-INSTANCE (ID Add)))
		(EQSIGN (ID sum) (DOT (ID af) (FUN-CALL (ID fold)(ID arr)(ID addOp)(INTLIT 0))))
		(PRINTLN (PLUS (STRINGLIT array sum: ) (ID sum)))
		(EQSIGN (ID multOp) (NEW-INSTANCE (ID Mult)))
		(EQSIGN (ID prod) (DOT (ID af) (FUN-CALL (ID fold)(ID arr)(ID multOp)(INTLIT 1))))
		(PRINTLN (PLUS (STRINGLIT array prod: ) (ID prod)))
		(RETURN (INTLIT 0))
	)
	)
)
(CLASS-DECL (ID Arrays)
	(MTD-DECL STRING (ID toString) (TY-ID-LIST (INT-ARRAY (ID arr)))
	(BLOCK
		(VAR-DECL STRING (ID arrString))
		(VAR-DECL INT (ID i))
		(EQSIGN (ID arrString) (STRINGLIT ))
		(EQSIGN (ID i) (INTLIT 0))
		(WHILE (< (ID i) (DOT (ID arr) LENGTH))
			(EQSIGN (ID arrString) (PLUS (PLUS (ID arrString) (ARRAY-LOOKUP (ID arr)(ID i))) (STRINGLIT ,)))
			(EQSIGN (ID i) (PLUS (ID i) (INTLIT 1)))
		)

		(RETURN (ID arrString))
	)
	)
	(MTD-DECL INT-ARRAY (ID filter) (TY-ID-LIST (INT-ARRAY (ID arr))((ID IntToBool) (ID fil)))
	(BLOCK
		(VAR-DECL INT (ID i))
		(VAR-DECL INT-ARRAY (ID tmpArr))
		(VAR-DECL INT (ID x))
		(VAR-DECL INT-ARRAY (ID finalArr))
		(VAR-DECL INT (ID y))
		(EQSIGN (ID i) (INTLIT 0))
		(EQSIGN (ID tmpArr) (NEW-INT-ARRAY (DOT (ID arr) LENGTH)))
		(EQSIGN (ID x) (INTLIT 0))
		(WHILE (< (ID i) (DOT (ID arr) LENGTH))
			(IF (DOT (ID fil) (FUN-CALL (ID f)(ARRAY-LOOKUP (ID arr)(ID i))))
				(EQSIGN (ARRAY-ASSIGN (ID tmpArr)(ID x)) (ARRAY-LOOKUP (ID arr)(ID i)))
				(EQSIGN (ID x) (PLUS (ID x) (INTLIT 1)))

			)

			(EQSIGN (ID i) (PLUS (ID i) (INTLIT 1)))
		)

		(EQSIGN (ID finalArr) (NEW-INT-ARRAY (ID x)))
		(EQSIGN (ID y) (INTLIT 0))
		(WHILE (< (ID y) (ID x))
			(EQSIGN (ARRAY-ASSIGN (ID finalArr)(ID y)) (ARRAY-LOOKUP (ID tmpArr)(ID y)))
			(EQSIGN (ID y) (PLUS (ID y) (INTLIT 1)))
		)

		(RETURN (ID finalArr))
	)
	)
	(MTD-DECL INT (ID fold) (TY-ID-LIST (INT-ARRAY (ID arr))((ID BinOp) (ID op))(INT (ID base)))
	(BLOCK
		(VAR-DECL INT (ID i))
		(VAR-DECL INT (ID acc))
		(EQSIGN (ID i) (INTLIT 0))
		(EQSIGN (ID acc) (ID base))
		(WHILE (< (ID i) (DOT (ID arr) LENGTH))
			(EQSIGN (ID acc) (DOT (ID op) (FUN-CALL (ID f)(ID acc)(ARRAY-LOOKUP (ID arr)(ID i)))))
			(EQSIGN (ID i) (PLUS (ID i) (INTLIT 1)))
		)

		(RETURN (ID acc))
	)
	)
)
(CLASS-DECL (ID BinOp)
	(MTD-DECL INT (ID f) (TY-ID-LIST (INT (ID a))(INT (ID b)))
	(BLOCK
		(RETURN (INTLIT 0))
	)
	)
)
(CLASS-DECL (ID IntToBool)
	(MTD-DECL BOOLEAN (ID f) (TY-ID-LIST (INT (ID a)))
	(BLOCK
		(RETURN FALSE)
	)
	)
)
(CLASS-DECL (ID Add) EXTENDS (ID BinOp)
	(VAR-DECL BOOLEAN (ID problemField))
	(MTD-DECL INT (ID f) (TY-ID-LIST (INT (ID a))(INT (ID b)))
	(BLOCK
		(RETURN (PLUS (ID a) (ID b)))
	)
	)
)
(CLASS-DECL (ID Mult) EXTENDS (ID BinOp)
	(MTD-DECL INT (ID f) (TY-ID-LIST (INT (ID a))(INT (ID b)))
	(BLOCK
		(RETURN (* (ID a) (ID b)))
	)
	)
)
(CLASS-DECL (ID Lt) EXTENDS (ID IntToBool)
	(VAR-DECL INT (ID b))
	(MTD-DECL BOOLEAN (ID f) (TY-ID-LIST (INT (ID a)))
	(BLOCK
		(RETURN (< (ID a) (ID b)))
	)
	)
	(MTD-DECL BOOLEAN (ID setB) (TY-ID-LIST (INT (ID c)))
	(BLOCK
		(EQSIGN (ID b) (ID c))
		(RETURN TRUE)
	)
	)
	(MTD-DECL INT (ID getB) (TY-ID-LIST )
	(BLOCK
		(RETURN (ID b))
	)
	)
)

