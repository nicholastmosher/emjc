//author: Dhanasekar Elangovan & Justin Gottshall
//The class implements mergesort
class MergeSort {
    public static void main(String[] args) {
    	sidef(new MergeSortPrinter().print());
   }
}

class MergeSortPrinter {
    MergeSorter sorter;
    int[] inputArray;
    int i;

    public int print() {
        inputArray = new int[11];
        inputArray[0] = 16;
        inputArray[1] = 13;
        inputArray[2] = 14;
        inputArray[3] = 40;
        inputArray[4] = 3;
        inputArray[5] = 32;
        inputArray[6] = 7;
        inputArray[7] = 22;
        inputArray[8] = 19;
        inputArray[9] = 8;
        inputArray[10] = 13;
        sorter = new MergeSorter();
        sidef(sorter.setInputArray(inputArray));
        sidef(sorter.mergeSort(0, sorter.getInputArray().length - 1));
        i = 0;
        while (i < sorter.getInputArray().length) {
            System.out.println(sorter.getInputArray()[i]);
            i = i + 1;
        }
        return 0;
    }
}

class MergeSorter {

    int[] tempArray;
    int[] inputArray;

    /**
     * Performs merge sort
     *
     * @param start
     * @param end
     */
    public int mergeSort(int start, int end) {
        int middle;
        if (start < end) {
            middle = (start + end) / 2;
            sidef(this.mergeSort(start, middle));
            sidef(this.mergeSort(middle + 1, end));
            sidef(this.merge(start, middle, end));
        }

        return 0;
    }

    /**
     * Merges the given two segments into a single segment in increasing order
     *
     * @param start
     * @param middle
     * @param end
     */
    public int merge(int start, int middle, int end) {
        int copyPtr;
        int sPtr;
        int mPtr;
        int oPtr;
        copyPtr = start;
        sPtr = start;
        mPtr = middle + 1;
        oPtr = start;

        while (copyPtr < (end+1) ) {
            tempArray[copyPtr] = inputArray[copyPtr];
            copyPtr = copyPtr + 1;
        }

        while (sPtr < (middle + 1) && mPtr < (end + 1)) {

            if (tempArray[sPtr] < tempArray[mPtr]) {
                inputArray[oPtr] = tempArray[sPtr];
                oPtr = oPtr + 1;
                sPtr = sPtr + 1;
            } else {
                inputArray[oPtr] = tempArray[mPtr];
                oPtr = oPtr + 1;
                mPtr = mPtr + 1;
            }
        }

        while (sPtr < (middle + 1)) {
            inputArray[oPtr] = tempArray[sPtr];
            oPtr = oPtr + 1;
            sPtr = sPtr + 1;
        }

        while (mPtr < (end + 1)) {
            inputArray[oPtr] = tempArray[mPtr];
            oPtr = oPtr + 1;
            mPtr = mPtr + 1;
        }

        return 0;
    }

    public int setInputArray(int[] newArray) {
    	inputArray = newArray;
    	return 0;
    }

    public int[] getInputArray() {
    	return inputArray;
    }
}
